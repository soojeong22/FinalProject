<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
		
	<!-- db.properties -->	
	<!-- 
		PropertyPlaceholderConfigurer : 클래스를 빈으로 등록하면 외부의 프로퍼티에 저장된 정보를 스프링 설정 파일에서 사용할 수 있다.
		<property name="locations"> : locations 프로퍼티의 값에는 콤마나 공백으로 구분된 프로퍼티 파일 목록이 자동으로 대입되어 온다.
									  	해당태크 body에는 배열이나 리스트를 사용할 수 있으며 적용할 프로퍼티 파일의 경로가 들어간다. 
									  	이렇게 설정된 프로퍼티 파일은 '${파일안의 프로퍼티의 key}'를 사용하여 참조할 수 있다.
	 -->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<!-- 프로퍼티 파일 경로 지정 -->
				<value>classpath:mybatis/db.properties</value> <!-- 경로 -->
					<!-- classpath: >>> src/main/resources -->
			</list>
		</property>
	</bean>	
	
	<!-- BasicDataSource : db.properties를 읽어서 config.xml의  <environments>태그를 자동으로 설정해준다.-->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">  <!-- 데이터베이스 커넥션 풀 -->
		<property name="driverClassName" value="${driver}"></property>
		<property name="url" value="${url}"></property>
		<property name="username" value="${username}"></property>
		<property name="password" value="${password}"></property>
	</bean>
	
	<!-- 
		# 마이바티스
		SqlSessionFactoryBuilder : SqlSessionFactory를 생성하기 위한 존재 지역변수(메소드에서 사용)로 생명주기를 관리하는 것이 좋다	
		SqlSessionFactory : SqlSession객체를 인스턴스화기 위해 사용한다. typeAliases<태그>(dto). db.properties, <mapper>태그 를 읽어 생성한다.
							한번 만든뒤 SqlSessionFactory는 애플리케이션을 실행하는 동안 존재해야만 한다. 즉 애플리케이션 스코프로 자바에서는 싱글톤으로 관리해야한다.
		SqlSession 		  : SqlSession 은 데이터베이스에 대해 SQL명령어를 실행하기 위해 필요한 모든 메소드를 가지고 있다. 
							그래서 SqlSession 인스턴스를 통해 직접 SQL 구문을 실행할 수 있다.
							서로 공유되지 않게 매번 생성되는 것이 좋으며 사용할때 마다 닫아주어야한다. 따라서 생명주기는 메소드(지역역)스코프가 되어야한다.
		Mapper 			  : Mapper는 매핑된 구문을 바인딩 하기 위해 만들어야 할 인터페이스이다. 
							mapper 인터페이스의 인스턴스는 SqlSession 에서 생성한다 그래서 SqlSession처럼 메소드 스코프에서 관리되어야 한다.
	 -->
	<!-- mybatis (sqlSessionFactory) : sqlSessionFactory객체를 여기서 생성   >>> 1.2. 커넥션 객체생성 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="configLocation" value="WEB-INF/spring/sqls/coverletter-config.xml"/> 
	</bean>
	
	<!-- mybatis (sqlSessionTemplate) : open Session과 close Session을 자동으로 해준다 >> 사용의 편의성 제공-->
	<bean id="sqlSessionTemPlate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactory"/>
	</bean>
	
	
	
	
	 <!-- 트랜잭션 처리와 관련된 매니저 객체 설정 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
    </bean>	
    
    <!-- 트랜잭션 처리 방식 -->
    <!-- 프로그래밍적 방식은 여러 메소드나 클래스에 대해서 다중으로 선언해야 하며,
         데이터를 관리하는 측면에서 어떤 트랜잭션 속성이 적용되었는지 찾기 힘들기 때문에
         일반적으로 선언적 방식을 선호한다. -->
         
    <!-- 선언적(XML) 방식 -->
    
    <tx:advice id="txAdvice" transaction-manager="transactionManager"> <!-- ccc -->
    	<tx:attributes>
    		<!-- 트랜잭션을 처리할 메소드 정의 -->
    		<!-- board_selectOne(), board_insertOne() 등등 이런식으로 사용하기 위해서 앞머리의 이름을 통일 시킨다 -->
    		<tx:method name="select*" rollback-for="Exception" read-only="true"/>
    		<tx:method name="insert*" rollback-for="Exception"/>
    		<tx:method name="update*" rollback-for="Exception"/>
    		<tx:method name="delete*" rollback-for="Exception"/>
    	</tx:attributes>
    </tx:advice>
    
    <!--aop: 같은 메소드가 여러클래스에 중복적으로 사용되어야 한다 (spring에서 자랑하는 부분 ) 
    	
    execution : 표현식, 직접 코드를 작서하지 않아도 내가 원하는 위치에 메소드를 사용할 수 있또록 설정해줌
    BoardServiceImpl,MemberServiceImpl...등 이런애들의 모든 메서드'.*(..)'
    -->
    <aop:config proxy-target-class="true">
    	<aop:pointcut expression="execution(* com.job.coverletter.*.*.biz.*BizImpl.*(..))" id="servicePc"/>
    	<!--transactionAdvisor: 위에 있는 내용들이 자동으로 실행 되게 해달라 
    							자동으로 commit을 시켜준다 
    	 -->
    	<aop:advisor id="transactionAdvisor" advice-ref="txAdvice" pointcut-ref="servicePc"/>
    </aop:config>
	
	
	
	<!-- Root Context: defines shared resources visible to all other web components -->
		
		<!--
		 	MultipartResolver 란?
			MultipartResolver는 Multipart형식으로 데이터가 전송된 경우, 해당 데이터를 스프링 MVC에서 사용할 수 있도로 변환 
			스프링이 기본으로 제공하는 MultipartResolver는 CommmnosMultipartResolver이다. 
			CommmnsMultipartResolver는 Commons FileUpload API를 이용해서 Multipart를 처리해준다.
			
			결론적으로 MultipartResolver는 Muiltpart객체를 컨트롤러에 전달하는 역할을 한다
			
			
			MultipartResolver프로퍼티
			maxUploadSize 	 : 	최대 업로드 가능한 바이트 크기, -1은 제한이 없음을 의미한다. 기본 값은 -1이다.
			maxInMemorysize  :  디스크에 임시 파일을 생성하기 전에 메모리에 보관할 수 있는 최대 바이트 크기,
								기본 값은 10240 바이트이다.
			defaultEncording : 	요청을 파싱할 때 사용할 캐릭터 인코딩, 지정하지 않은 경우
								HttpServletRequest.setEncording() 메서드로 지정한 캐릭터셋이 사용된다.
								아무 값도 없을 경우 ISO-8859-1을 사용한다.
		 -->
		
		
		
		<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
			<property name="maxUploadSize" value="1000000000"/>
			<property name="defaultEncoding" value="UTF-8"/>
		</bean>
		
		<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
			<property name="basenames">
				<list>
				<!-- message 패키지의 error.properties 파일 -->
					<value>com.mvc.updown.msg.error</value>
				</list>
			</property>
			<property name="cacheSeconds">
				<value>5</value>
			</property>
			<property name="defaultEncoding" value="UTF-8"/>
		</bean>
	
	
	
</beans>
